append variables
    -
        var web3Features = [
        {
        image:'fast-performance.png',
        title:'1. Connect to the front end',
        text:''
        },
        {
        image:'customization.png',
        title:'',
        text:''
        },
        {
        image:'app.png',
        title:'3. Access the data',
        text:'Read data directly from the evm storage'
        }
        
        ]

mixin ApiWeb3(config)
    .col-md-4.mb-6
        .text-center.px-lg-3
            img.img-fluid.mb-3(src=`${CWD}assets/img/illustrations/${config.image}` width="90"  alt='')
            h5.fw-bold=config.title
            p.mb-md-0=config.text

mixin ApiWeb3
    +Section.py-4.py-lg-6#features
        .row.justify-content-center.mb-6
            .col-sm-10.col-lg-6.text-center.mx-auto.mb-3.mb-md-5.mt-4
                h6.fw-bold.fs-4.display-3.lh-sm Accessing data in contracts
                p.mb-0 
                |   We use a radically different way of putting data on-chain called "flash storage". The data 
                |   is automatically attached to a transaction and erased afterwards thus reducing gas fees. The information 
                |   is kept in the EVM storage ensuring inter-protocol composability.
             
        .row.align-items-center.mb-6
            .col-md-6.col-lg-6.text-center.text-md-end
                h5.mb-3 1. Connect to your contracts
                p.mb-3 Configure a proxy pointing to your smart contract
                
            .col-md-6.col-lg-6.px-sm-5.px-md-0
                pre.prettyprint
                    br
                    |   const Proxy = await ethers.getContractFactory("Redstone proxy");
                    |   const defiProtocol = await DefiProtocol.attach("0x....");
                    |   const priceFeed = await PriceFeed.attach("0x....");
                    |
                    |   //Deploy proxy
                    |   const defiProtocolProxy = await Proxy.deploy(
                    |       defiProtocol.address,
                    |       proxyAdmin.address,
                    |       priceFeed.address
                    |   );
                    |   
                
        .row.align-items-center.mb-6
            .col-md-6.col-lg-6.text-center.text-center.text-lg-start.order-lg-2
                h5.mb-3 2. Connect to the front end
                p.mb-3 Seamlessly connect to your front-end using a web3 contract wrapper

            .col-md-6.col-lg-6.px-sm-5.px-md-0.order-lg-1
                pre.prettyprint
                    br
                    |   const priceFeedApi = require('redstone-api'); 
                    |   const defiProtocol = await DefiProtocol.attach("0x....");
                    |
                    |   //Wrap web3 smart contract
                    |   const wrappedProtocol = wrapContract(defiProtocol, priceFeedApi);
                    |
                    |   //Execute action with attached prices
                    |   await wrappedProtocol.executeAction();
                    |           

                    
        .row.align-items-center
            .col-md-6.col-lg-6.text-center.text-md-end
                h5.mb-3 3. Access the data in your contracts
                p.mb-3 Read data with the same convenience as using other Oracles based on the on-chain storage

            .col-md-6.col-lg-6.px-sm-5.px-md-0
                pre.prettyprint
                    br
                    |   function executeAction(...) external {
                    |         uint256 latestETHPrice = priceFeed.getPrice("ETH");
                    |
                    |         //Now you can use the price in your code
                    |         //...
                    |    }
                    |   
                        
